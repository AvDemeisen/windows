<!DOCTYPE html>
<html>
<head>
  <%- include ("../partials/header.ejs") %>
</head>

<body>
  <div id="container">
    <div id="backLayer"></div>
    <div id="midLayer"></div>
    <div id="frontLayer"></div>
    <div class="controls">
      <button class="previousButton" onclick="sceneHandler()" />
      <button id="acceptButton" class="acceptButton" onclick="permissionHandler()" />
      <button class="nextButton" onclick="sceneHandler()" />
    </div>
  </div>

  <style>

  body {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #5A5A5A;
    margin: 0;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    box-sizing: border-box;
  }

#container {
  position: relative;
  height: 100%;
  width: 100%;
  max-height: 1000px;
  max-width: 500px;
  overflow: hidden;
}

#frontLayer,
#midLayer,
#backLayer {
  position: absolute;
  background-size: cover;
  background-position: bottom;
  box-sizing: border-box;
}

#frontLayer {
  top: -5%;
  left: -5%;
  height: 110%;
  width: 110%;
}

#midLayer {
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
}

#backLayer {
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
}

.controls {
  position: absolute;
  bottom: 20%;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  width: 100%;
}

button {
  background-color: #ECEDF2;
  color: #A3A5C2;
}

.acceptButton,
.nextButton,
.previousButton {
  position: relative;
  height: 48px;
width: 48px;
left: 48px;
top: 0px;
border-radius: 0px;
  transition: all 200ms cubic-bezier(0.2, 0, 0, 1);
  border: 0;
  white-space: nowrap;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  overflow: hidden;
  font-size: 24px;
}

.acceptButton::after {
  content: "";
  display: block;
  box-sizing: border-box;
  position: absolute;
  width: 0;
  height: 10px;
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
  border-left: 12px solid;
  top: 15px;
  left: 18px;
}

.previousButton::after,
.previousButton::before {
    content: "";
    display: block;
    box-sizing: border-box;
    position: absolute;
    width: 2px;
    height: 14px;
    border-left: 2px solid;
    top: 18px;
    left: 16px;
}
.previousButton::after {
    width: 10px;
    height: 10px;
    border-bottom: 2px solid;
    transform: rotate(45deg);

    left: 22px;
    top: 20px;

}



.nextButton::after,
.nextButton::before {
    content: "";
    display: block;
    box-sizing: border-box;
    position: absolute;
    width: 2px;
    height: 14px;
    border-right: 2px solid;
    top: 18px;
    right: 16px;
}
.nextButton::after {
    width: 10px;
    height: 10px;
    border-bottom: 2px solid;
    transform: rotate(-45deg);
    
    right: 22px;
    top: 20px;

}




  </style>
  <script>

const container = document.getElementById('container');
const frontLayer = document.getElementById('frontLayer');
const midLayer = document.getElementById('midLayer');
const backLayer = document.getElementById('backLayer');
const acceptButton = document.getElementById('acceptButton');

let isDragging = false;
let currentX;
let currentY;
let initialX;
let initialY;
let xOffset = 0;
let yOffset = 0;
let granted = false;
let scene = 'two';

const maxTiltAmount = 9;
const maxDragAmount = 0.02
const frontLayerOffset = 0;
const midLayerOffset = 0.4;
const backLayerOffset = midLayerOffset * 2;
const sensitivity = 1;

const frontImage = (lit) => `/assets/${scene}/frontLayer-${lit ? 'lit' : 'unlit'}.png`;
const midImage = (lit) => `/assets/${scene}/midLayer-${lit ? 'lit' : 'unlit'}.png`;
const backImage = (lit) => `/assets/${scene}/backLayer-${lit ? 'lit' : 'unlit'}.png`;

const dragStart = (e) => {
  initialX = e.clientX - xOffset;
  initialY = e.clientY - yOffset;
  isDragging = true;
};

const dragEnd = (e) => {
  initialX = currentX;
  initialY = currentY;
  
  isDragging = false;
};

const drag = (e) => {
  if (isDragging) {
    e.preventDefault();
    currentX = e.clientX - initialX;
    currentY = e.clientY - initialY;

    const maxDrag = container.offsetWidth * maxDragAmount; 
    if (Math.abs(currentX) > maxDrag || Math.abs(currentY) > maxDrag) return;
    xOffset = currentX;
    yOffset = currentY;
    console.log({currentX, currentY})
    setTranslate(currentX - frontLayerOffset, currentY - frontLayerOffset, frontLayer);
    setTranslate(currentX * midLayerOffset, currentY * midLayerOffset, midLayer);
    setTranslate(currentX * backLayerOffset, currentY * backLayerOffset, backLayer);
  }
};

const handleOrientation = (event) => {
  const { beta, gamma } = event;
  currentX = gamma >= maxTiltAmount ? maxTiltAmount : gamma <= -maxTiltAmount ? -maxTiltAmount : gamma;
  currentY = beta - 60 >= maxTiltAmount ? maxTiltAmount : beta - 60 <= -maxTiltAmount ? -maxTiltAmount : beta - 60;
  setTranslate(currentX - frontLayerOffset, currentY - frontLayerOffset, frontLayer);
  setTranslate(currentX * midLayerOffset, currentY * midLayerOffset, midLayer);
  setTranslate(currentX * backLayerOffset, currentY * backLayerOffset, backLayer);
}

frontLayer.addEventListener("mousedown", dragStart);
frontLayer.addEventListener("mouseup", dragEnd);
frontLayer.addEventListener("mousemove", drag);
window.addEventListener("deviceorientation", handleOrientation);

const setBackgroundImage = (elm, imageUrl) => {
  elm.style.backgroundImage = `url(${imageUrl})`;
};

const setTranslate = (xPos, yPos, el) => {
  el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;
};

const startFlicker = () => {
  setInterval(flicker, Math.random() * 1000 + 600);
};

const flicker = () => {
  const lit = Math.random() >= 0.5;
  const numFlickers = Math.floor(Math.random() * 4) + 1; 
  for (let i = 0; i < numFlickers; i++) {
    setTimeout(changeColor, Math.random() * 1000 + 600, lit); 
  }
};

const changeColor = (lit) => {
  setBackgroundImage(frontLayer, frontImage(lit));
  setBackgroundImage(midLayer, midImage(lit));
  setBackgroundImage(backLayer, backImage(lit));
};

const permissionHandler = () => {
  if (typeof DeviceOrientationEvent.requestPermission === 'function') {
    DeviceOrientationEvent.requestPermission()
      .then((permissionState) => {
        if (permissionState === 'granted') {
          window.addEventListener('deviceorientation', handleOrientation);
          acceptButton.style.display = 'none';
        } else {
          window.alert('Request to access the orientation was rejected');
        }
      })
      .catch(console.error);
  } else {
    window.addEventListener('deviceorientation', handleOrientation);
    acceptButton.style.display = 'none';
  }
}

const sceneHandler = () => {
  scene = scene === 'one' ? 'two' : 'one'
}


  startFlicker();
  </script>
</body>
</html>
