<!DOCTYPE html>
<html>
<head>
  <%- include ("../partials/header.ejs") %>
 
</head>

<body>
  <div id="container">
    <div id="background" />
    <div id="overlay" />
  </div>
  <style>
    body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #5A5A5A;
  margin: 0;
  height: 100vh;

  width: 100vw;

  overflow: hidden;
  box-sizing: border-box;
}

#container {
  position: relative;
  height: 100%;
  width: 100%;
  max-height: 1000px;
  max-width: 500px;
  overflow: hidden;
}

#overlay {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-size: contain;
  background-position: bottom;
  box-sizing: border-box;
}


#background {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-size: contain;
  background-position: bottom;
  box-sizing: border-box;
}
  </style>
  <script>

const container = document.getElementById('container');
const overlay = document.getElementById('overlay');
const background = document.getElementById('background');

let isDragging = false;
let currentX;
let currentY;
let initialX;
let initialY;
let xOffset = 0;
let yOffset = 0;

const maxAmount = 0.02
const offsetAmount = 0.9;

overlay.addEventListener("mousedown", dragStart);
overlay.addEventListener("mouseup", dragEnd);
overlay.addEventListener("mousemove", drag);

window.addEventListener("deviceorientation", (event) => {
  // Get the current values of gamma and beta
  const gamma = event.gamma;
  const beta = event.beta;

  // Update the currentX and currentY values based on the orientation
  if (gamma > 0) {
    currentX += gamma * sensitivity;
  } else if (gamma < 0) {
    currentX += gamma * sensitivity;
  }

  if (beta > 0) {
    currentY += beta * sensitivity;
  } else if (beta < 0) {
    currentY += beta * sensitivity;
  }

  // Update the position of the divs
  setTranslate(currentX, currentY, overlay);
  setTranslate(currentX * offsetAmount, currentY * offsetAmount, background);
});

const dragStart = (e) => {
  initialX = e.clientX - xOffset;
  initialY = e.clientY - yOffset;
  
  isDragging = true;
};

const dragEnd = (e) => {
  initialX = currentX;
  initialY = currentY;
  
  isDragging = false;
};

const drag = (e) => {
  if (isDragging) {
    e.preventDefault();
    currentX = e.clientX - initialX;
    currentY = e.clientY - initialY;
  

    const maxDrag = container.offsetWidth * maxAmount; 
    if (Math.abs(currentX) > maxDrag || Math.abs(currentY) > maxDrag) {
      return;
    }
  
    xOffset = currentX;
    yOffset = currentY;
  
    setTranslate(currentX, currentY, overlay);
    setTranslate(currentX * offsetAmount, currentY * offsetAmount, background);
  }
};






const setBackgroundImage = (elm, imageUrl) => {
  elm.style.backgroundImage = `url(${imageUrl})`;
};

const setTranslate = (xPos, yPos, el) => {
  el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;
};

const startFlicker = () => {
  setInterval(flicker, Math.random() * 1000 + 100);
};

const flicker = () => {
  const lit = Math.random() >= 0.5;
  const numFlickers = Math.floor(Math.random() * 4) + 1; 
  for (let i = 0; i < numFlickers; i++) {
    setTimeout(changeColor, Math.random() * 1000 + 100, lit); 
  }
};

const changeColor = (lit) => {
  setBackgroundImage(overlay, lit ? '/assets/WALL-LIT.png' : '/assets/WALL-UNLIT.png');
  setBackgroundImage(background, lit ? '/assets/ROOM-LIT.png' : '/assets/ROOM-UNLIT.png');
};

startFlicker();



  </script>
</body>
</html>
